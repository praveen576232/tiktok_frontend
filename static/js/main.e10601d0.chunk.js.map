{"version":3,"sources":["VideoComponent/Footer.js","VideoComponent/VideoSidebar.js","VideoComponent/VideoComponent.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["Footer","channel","Vdescption","songName","className","mode","index","alt","src","VideoSidebar","tlikes","tmessage","tshare","useState","like","setlike","setLikes","fontSize","onClick","VideoComponent","isplaying","setisplaying","videoRef","useRef","current","pause","play","loop","ref","instance","Axios","create","baseURL","App","videos","setVideos","useEffect","a","axios","get","response","data","featchdata","map","video","key","_id","videoSrc","video_desc","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e10601d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport Ticker from \"react-ticker\";\r\nfunction Footer({ channel, Vdescption, songName }) {\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer_left\">\r\n        <p>@{channel}</p>\r\n        <p>{Vdescption}</p>\r\n        <div className=\"footer_icon\">\r\n          <MusicNoteIcon></MusicNoteIcon>\r\n          <Ticker mode=\"smooth\">\r\n            {({ index }) => (\r\n              <>\r\n                <p>{songName}</p>\r\n              </>\r\n            )}\r\n          </Ticker>\r\n        </div>\r\n      </div>\r\n      <img\r\n        alt=\"\"\r\n        className=\"footer_spin_disk\"\r\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\r\n      ></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport \"./VideoSidebar.css\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteOutlinedIcon from '@material-ui/icons/FavoriteOutlined';\r\nimport MessageSharpIcon from '@material-ui/icons/MessageSharp';\r\nimport ShareSharpIcon from '@material-ui/icons/ShareSharp';\r\nfunction VideoSidebar({tlikes,tmessage,tshare}) {\r\n    const [like,setlike] = useState(false);\r\nconst setLikes=()=>{\r\nif(like){\r\nsetlike(false)\r\n}else{\r\nsetlike(true)\r\n}\r\n}\r\n  return (\r\n    <div className=\"videosidebar\">\r\n      <div className=\"videosidebar_icon_text \">\r\n          {like?(\r\n              <FavoriteOutlinedIcon className=\"like-effect\" fontSize=\"large\" onClick={setLikes}></FavoriteOutlinedIcon>\r\n          )\r\n          :(\r\n             <FavoriteBorderIcon  fontSize=\"large\" onClick={setLikes}/> \r\n          )}\r\n          <p>{like?tlikes+1:tlikes}</p>\r\n      </div>\r\n      <div className=\"videosidebar_icon_text\">\r\n          <MessageSharpIcon fontSize=\"large\"></MessageSharpIcon>\r\n          <p>{tmessage}</p>\r\n      </div>\r\n      <div className=\"videosidebar_icon_text\">\r\n          <ShareSharpIcon fontSize=\"large\"></ShareSharpIcon>\r\n          <p>{tshare}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoSidebar;\r\n","import React, { useState, useRef } from 'react'\r\nimport './VideoComponent.css'\r\nimport Footer from './Footer';\r\nimport VideoSidebar from './VideoSidebar';\r\nfunction VideoComponent({src,tlikes,tmessage,tshare,channel,Vdescption,songName}) {\r\n    const [isplaying,setisplaying] =useState(false);\r\n    const videoRef = useRef(null)\r\n    const playVideo =() =>{\r\n        if(isplaying){\r\n            videoRef.current.pause()\r\nsetisplaying(false);\r\n\r\n        }else{\r\n            videoRef.current.play()\r\nsetisplaying(true)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"videocomponent\">\r\n            <video className=\"video\" \r\n            src={src}\r\n            alt=\"\" \r\n            onClick={playVideo}\r\n           loop\r\n            ref={videoRef}\r\n            />\r\n         <Footer channel={channel} Vdescption={Vdescption} songName={songName}/>\r\n        <VideoSidebar tlikes={tlikes} tmessage={tmessage} tshare={tshare}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoComponent\r\n","import Axios from 'axios';\r\nconst instance = Axios.create({\r\n    baseURL:'https://tiktok-clone-backend-app.herokuapp.com/'\r\n});\r\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport VideoComponent from './VideoComponent/VideoComponent';\nimport axios from './axios'\nfunction App() {\n  const [videos ,setVideos]=useState([]);\n  useEffect(() => {\n    const featchdata = async() =>{\n   const response = await axios.get('/v1/video/poast');\n   if(response){\n  setVideos(response.data);\n\n   }\n   return response;\n    }\n    featchdata();\n  }, [])\n  return (\n    <div className=\"app\">\n      <div className=\"app_video\">\n    {\n      videos && videos?.map(video =>\n        (\n          <VideoComponent \n          key={video?._id} \n          src={video?.videoSrc} \n          channel={video?.channel} \n          Vdescption={video?.video_desc} \n          songName={video?.songName} \n          tlikes={parseInt( video?.tlikes)} \n          tmessage={parseInt(video?.tmessage)} \n          tshare={parseInt(video?.tshare)}/>\n        ))\n    }\n      \n  \n    \n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}